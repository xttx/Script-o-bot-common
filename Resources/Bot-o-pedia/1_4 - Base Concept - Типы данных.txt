<size=30><b>Типы данных</b></size>
----------------------------------------
<size=26>Типы данных</size>
Как и во многих языках программирования, в C# есть своя система типов данных, которая используется для создания переменных. Тип данных определяет внутреннее представление данных, множество значений, которые может принимать объект, а также допустимые действия, которые можно применять над объектом.

В языке C# есть следующие примитивные типы данных:

<t>bool</t>: хранит значение true или false (логические литералы). Представлен системным типом <n>System</n>.<c>Boolean</c>
<t>bool</t> alive = true;
<t>bool</t> isDead = false;

<t>byte</t>: хранит целое число от 0 до 255 и занимает 1 байт. Представлен системным типом <n>System</n>.<c>Byte</c>
<t>byte</t> n1 = 1;
<t>byte</t> n2 = 101;

<t>sbyte</t>: хранит целое число от -128 до 127 и занимает 1 байт. Представлен системным типом <n>System</n>.<c>SByte</c>
<t>sbyte</t> n1 = -101;
<t>sbyte</t> n2 = 102;

<t>short</t>: хранит целое число от -32768 до 32767 и занимает 2 байта. Представлен системным типом <n>System</n>.<c>Int16</c>
<t>short</t> n1 = 1;
<t>short</t> n2 = 102;

<t>ushort</t>: хранит целое число от 0 до 65535 и занимает 2 байта. Представлен системным типом <n>System</n>.<c>UInt16</c>
<t>ushort</t> n1 = 1;
<t>ushort</t> n2 = 102;

<t>int</t>: хранит целое число от -2147483648 до 2147483647 и занимает 4 байта. Представлен системным типом <n>System</n>.<c>Int32</c>. Все целочисленные литералы по умолчанию представляют значения типа <t>int</t>:
<t>int</t> a = 10;
<t>int</t> b = 9384;
<t>int</t> c = -13941;

<t>uint</t>: хранит целое число от 0 до 4294967295 и занимает 4 байта. Представлен системным типом <n>System</n>.<c>UInt32</c>
<t>uint</t> a = 10;
<t>uint</t> b = -1101;
<t>uint</t> c = 1973826;

<t>long</t>: хранит целое число от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807 и занимает 8 байт. Представлен системным типом <n>System</n>.<c>Int64</c>
<t>long</t> a = -32742321;
<t>long</t> b = 16;

<t>ulong</t>: хранит целое число от 0 до 18 446 744 073 709 551 615 и занимает 8 байт. Представлен системным типом <n>System</n>.<c>UInt64</c>
<t>ulong</t> a = 10;
<t>ulong</t> b = 9372;

<t>float</t>: хранит число с плавающей точкой от -3.4*10^38 до 3.4*10^38 и занимает 4 байта. Представлен системным типом <n>System</n>.<c>Single</c>
<t>float</t> a = 318f;
<t>float</t> b = 3.14f;
<t>float</t> c = 49.58862f;

<t>double</t>: хранит число с плавающей точкой от ±5.0*10^-324 до ±1.7*10^308 и занимает 8 байта. Представлен системным типом <n>System</n>.<c>Double</c>
<t>double</t> a = 318.399;
<t>double</t> b = 3.14;

<t>decimal</t>: хранит десятичное дробное число. Если употребляется без десятичной запятой, имеет значение от ±1.0*10^-28 до ±7.9228*10^28, может хранить 28 знаков после запятой и занимает 16 байт. Представлен системным типом <n>System</n>.<c>Decimal</c>
<t>decimal</t> d1 = 159.32165724
<t>decimal</t> d2 = 99.99
<t>decimal</t> d3 = 47

<t>char</t>: хранит одиночный символ в кодировке Unicode и занимает 2 байта. Представлен системным типом <n>System</n>.<c>Char</c>. Этому типу соответствуют символьные литералы:
<t>char</t> a = 'A';
<t>char</t> a = 'x';
<t>char</t> b = '\n';

<t>string</t>: хранит набор символов Unicode. Представлен системным типом <n>System</n>.<c>String</c>. Этому типу соответствуют символьные литералы.
<t>string</t> hello = "Hello";
<t>string</t> word = "world";

<t>object</t>: может хранить значение любого типа данных и занимает 4 байта на 32-разрядной платформе и 8 байт на 64-разрядной платформе. Представлен системным типом <n>System</n>.<c>Object</c>, который является базовым для всех других типов и классов .NET.
<t>object</t> a = 22;
<t>object</t> b = 3.14;
<t>object</t> c = "hello code";

<size=26>Использование суффиксов</size>

При присвоении значений надо иметь в виду следующую тонкость: все вещественные (дробные) литералы рассматриваются как значения типа <t>double</t>. И чтобы указать, что дробное число представляет тип <t>float</t> или тип <t>decimal</t>, необходимо к литералу добавлять суффикс: F/f - для <t>float</t> и M/m - для <t>decimal</t>.
<t>double</t> a = 45.31;
<t>double</t> b = 27.4;
<t>float</t> c = 3.14F;
<t>float</t> d = 30.6f;
<t>decimal</t> e = 1005.8M;
<t>decimal</t> f = 334.8m;

Подобным образом все целочисленные литералы рассматриваются как значения типа <t>int</t>. Чтобы явным образом указать, что целочисленный литерал представляет значение типа <t>uint</t>, надо использовать суффикс U/u, для типа <t>long</t> - суффикс L/l, а для типа <t>ulong</t> - суффикс UL/ul:
<t>int</t> a = 10;
<t>uint</t> b = 20U;
<t>long</t> c = 30L;
<t>ulong</t> d = 40UL;

<size=26>double или decimal</size>
Из выше перечисленного списка типов данных очевидно, что если мы хотим использовать в программе числа до 256, то для их хранения мы можем использоват переменные типа <t>byte</t>. При использовании больших значений мы можем взять тип <t>short</t>, <t>int</t>, <t>long</t>. То же самое для дробных чисел - для обычных дробных чисел можно взять тип <t>float</t>, для очень больших дробных чисел - тип <t>double</t>. Тип <t>decimal</t> здесь стоит особняком в том плане, что несмотря на большую разрядность по сравнению с типом <t>double</t>, тип <t>double</t> может хранить большее значение. Однако значение <t>decimal</t> может содержать до 28 знаков после запятой, тогда как значение типа <t>double</t> - 15-16 знаков после запятой.

<t>decimal</t> чаще находит применение в финансовых вычислениях, тогда как <t>double</t> - в математических операциях. Общие различия между этими двумя типами можно выразить следующей таблицей:
					Decimal		Double
Наибольшее значение			~10^28		~10^308
Наименьшее значение (без учета нуля)	10^-28		~10^-323
Знаков после запятой			28		15-16
Разрядность				16 байт		8 байт
Операций в секунду			100,000+	1,000,000

<size=26>Неявная типизация</size>
Как правило, мы явным образом указывем тип переменных, например, <t>int</t> x;. И компилятор при запуске уже знает, что x хранит целочисленное значение.
Однако мы можем использовать и модель неявной типизации:
<t>var</t> hello = <str>"Hell to World"</str>; <cmt>//объявляет и инициализирует переменную 'hello', типа string</cmt>
<t>var</t> c = 20; <cmt>//объявляет и инициализирует переменную 'c', типа int</cmt>

Для неявной типизации вместо названия типа данных используется ключевое слово var. Затем уже при компиляции компилятор сам выводит тип данных исходя из присвоенного значения.
Эти переменные подобны обычным, однако они имеют некоторые ограничения.
Во-первых, мы не можем сначала объявить неявно типизируемую переменную, а затем инициализировать:
<cmt>//этот код работает</cmt>
<t>int</t> a;
a = 20;
 
<cmt>//этот код не работает</cmt>
<t>var</t> c;
c = 20;

Во-вторых, мы не можем указать в качестве значения неявно типизируемой переменной null. Так как значение null валидно для любого ссылочного типа, компилятор не сможет вывести конкретный тип данных.
<cmt>//этот код работает</cmt>
var c = null;

<size=26>Использование системных типов</size>
Выше при перечислении всех базовых типов данных для каждого упоминался системный тип. Потому что название встроенного типа по сути представляет собой сокращенное обозначение системного типа. Например, следующие переменные будут эквивалентны по типу:
<t>int</t> a = 4;
<n>System</n>.<c>Int32</c> b = 4;

