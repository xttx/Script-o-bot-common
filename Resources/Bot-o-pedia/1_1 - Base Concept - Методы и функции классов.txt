  Классы, если в кратце, это объединённые каким то общим делом наборы комманд, для этого дела предназначенных.

  Когда вы сортируете файлы, на жёстком диске, вряд-ли вы будете пихать мемасики в папку "Бухгалтерия 11/2014, важно, срочно, для Виталия Олеговича".
По названию папки, сразу должно быть более менее понятно что в ней лежит. За исключением, конечно, папок Trash, other, q, unsorted и т.п.

  Так же и с классами: вряд ли стоит искать методы (читай комманды) для генерации случайных чискл в классе "Network", или методы для работы с файлами в классе "Random".

  Конечно, классы это нечто гораздо большее, чем просто наборы комманд, но об этом читайте в другом разделе, которого пока нет.

  Что бы заставить класс что-то сделать, нужно вызвать его метод или функцию.
  Вот так выглядит вызов метода Move() класса BOT:
BOT.Move();

  Пишем имя класса, затем через точку имя метода или функции, ставим скобки и запяточку.

  В скобках мы пишем параметры для комманды. У метода Move их нет, но скобки всё равно нужны, хоть в них ничего и не будет. Иначе у компилятора сносит башню.

  А например у метода Rotate - параметр есть: это число, в градусах, на которые надо повернуть глупого бота.
  При выполнении следующей комманды, бот повернёться на 90 градусов:
BOT.Rotate(90);

  Параметров у метода за просто может быть несколько. В этом случае, они разделяются запятыми, внутри скобок.
  На момент написания этого топика у бота таких методов нет, по этому возмём строчку из исходника сего творения:
TypeText.Type("Привет, меня зовут ХУЙНЯ!", 3);

  В этом примере, в классе TypeText (который печатает текст), вызывается метод "ТУПЕ". У него два параметра:
    первый - текст, который надо напчатать;
    второй - скорость: сколько символов в секунду надо печатать.

  Так и живём...

  У классов, кроме методов, есть ещё и функции.
  И ещё куча всего... но пока про функции.

  Функции от методов отличаются только тем, что они что-то возвращабают.

  Например у класса Random, есть функция Range(x, y), которая генерит случайное число, в промежутке от x до y.
  Никто не запрещает вызвать её как метод:
Random.Range(1, 10);

  ok, мы загадали случайное число, от 1го до 10и, и... мы никогда его не узнаем.

  Смысл функций в том, что бы <i>возвращать результат сделанной работы</i>.
  Этот результат, обычно пихается в переменную:
int i;
i = Random.Range(1, 10);

  После отработки этих двух строчек, у нас в переменной будет лежать случайное число от 1го до 10и
  Потом, эту переменную можно где-то использовать.

  Вот так, например, можно заставить бота сделать какую ни будь рандомную хрень:

int i;
i = Random.Range(1, 4);
if (i == 1) BOT.Say("Hi");
if (i == 2) BOT.Move(1);
if (i == 3) BOT.Rotate(45);

