while (expression)
{
  //этот блок кода будет выполнятся пока условие истинно
}


do 
{
  //этот блок тоже будет выполнятся пока условие истинно, 
  //но проверка будет выполнятся после выполнения блока, а не перед его выполнением
}
while (expression)


сложный цикл:
for (инициализация; условие; итерация)
{
  //какой-то код
}

- операция инициализации выполняется перед циклом,
- цикл выполняется пока условие верно,
- после каждой итерации (т.е. выполнения блока цикла один раз), выполняется операция итерации

пример:
for (int i = 0; i < 9; i++)
{

}
  Первая часть объявления цикла - int i = 0 - создает и инициализирует счетчик i.
  Вторая часть - условие, при котором будет выполняться цикл. Пока условное выражение возвращает true, будет выполняться цикл. В данном случае цикл будет выполняться, пока счетчик i не достигнет 9.
  И третья часть - приращение счетчика на единицу. Опять же нам необязательно увеличивать на единицу. Можно уменьшать: i--. Или прибовлять 2: i+=2.
  В итоге блок цикла сработает 9 раз, пока значение i не станет равным 9. И каждый раз это значение будет увеличиваться на 1.

  Нам необязательно указывать все условия при объявлении цикла. Например, мы можем написать так:
for (; ;)
{

}
  Формально определение цикла осталось тем же, только теперь блоки в определении у нас пустые. У нас нет инициализированной переменной-счетчика, нет условия, поэтому цикл будет работать вечно - бесконечный цикл.

Цикл для массивов - перебирает массив.
foreach (инициализация in массив)
{

}


